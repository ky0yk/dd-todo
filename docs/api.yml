openapi: 3.0.0
info:
  version: 1.0.0
  title: Einoji

tags:
  - name: users
  - name: tasks

paths:
  /users:
    post:
      tags:
        - users
      summary: ユーザー登録
      description: 新しいユーザーを登録します。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/400PathAndPayload'
        409:
          $ref: '#/components/responses/409EmailAlreadyInUse'
        422:
          $ref: '#/components/responses/422Common'
        500:
          $ref: '#/components/responses/500Common'
        503:
          $ref: '#/components/responses/503Common'

  /users/token:
    post:
      tags:
        - users
      summary: JWTトークンの取得 【未実装】
      description: ユーザー情報を使用して認証し、成功した場合にJWTを返します。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessTokenRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenResponse'
        400:
          $ref: '#/components/responses/400PathAndPayload'
        500:
          $ref: '#/components/responses/500Common'
        503:
          $ref: '#/components/responses/503Common'

  /tasks:
    get:
      tags:
        - tasks
      summary: タスク一覧取得 【未実装】
      description: タスク一覧のサマリーを取得します。ソートは作成日時の昇順です。
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskSummary'
        # TODO: クエリパラメータが増えたら400系のエラーを追加する
        500:
          $ref: '#/components/responses/500Common'
        503:
          $ref: '#/components/responses/503Common'
    post:
      tags:
        - tasks
      summary: タスク作成
      description: 新しいタスクを作成します。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          $ref: '#/components/responses/400Path'
        422:
          $ref: '#/components/responses/422Common'
        500:
          $ref: '#/components/responses/500Common'
        503:
          $ref: '#/components/responses/503Common'

  /tasks/{id}:
    get:
      tags:
        - tasks
      summary: タスク取得
      description: IDで指定されたタスクを取得します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    enum: [INVALID_PATH_PARAMETER]
                  message:
                    type: string
              examples:
                INVALID_PATH_PARAMETER:
                  $ref: '#/components/examples/INVALID_PATH_PARAMETER'
        404:
          $ref: '#/components/responses/404Common'
        500:
          $ref: '#/components/responses/500Common'
        503:
          $ref: '#/components/responses/503Common'

    put:
      tags:
        - tasks
      summary: タスク更新
      description: タスクの詳細情報を更新します。リクエストボディには、少なくとも1つのプロパティが含まれている必要があります。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          $ref: '#/components/responses/400PathAndPayload'
        404:
          $ref: '#/components/responses/404Common'
        422:
          $ref: '#/components/responses/422PaylodAndUpdateRule'
        500:
          $ref: '#/components/responses/500Common'
        503:
          $ref: '#/components/responses/503Common'

    delete:
      tags:
        - tasks
      summary: タスク削除
      description: タスクを削除します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: No Content
        400:
          $ref: '#/components/responses/400Path'
        404:
          $ref: '#/components/responses/404Common'
        500:
          $ref: '#/components/responses/500Common'
        503:
          $ref: '#/components/responses/503Common'

  /tasks/{id}/complete:
    patch:
      tags:
        - tasks
      summary: タスク完了状態変更 【未実装】
      description: タスクの完了状態を変更します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteTaskRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          $ref: '#/components/responses/400PathAndPayload'
        404:
          $ref: '#/components/responses/404Common'
        422:
          $ref: '#/components/responses/422PaylodAndUpdateRule'
        500:
          $ref: '#/components/responses/500Common'
        503:
          $ref: '#/components/responses/503Common'

components:
  schemas:
    TaskTitle:
      type: string
      description: タスクのタイトル
      minLength: 1
      maxLength: 100
      example: コーヒーを淹れる
    TaskDescription:
      type: string
      description: タスクの説明
      maxLength: 1000
      example: 濃いめで
    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: タスクの一意の識別子(UUID)
          example: f0f8f5a0-309d-11ec-8d3d-0242ac130003
        title:
          $ref: '#/components/schemas/TaskTitle'
        completed:
          type: boolean
          description: タスクが完了したかどうか
          example: false
        description:
          $ref: '#/components/schemas/TaskDescription'
        createdAt:
          type: string
          format: date-time
          description: タスクの作成日時（ISO 8601形式）
          example: 2021-06-22T14:24:02.071Z
        updatedAt:
          type: string
          format: date-time
          description: タスクの最終更新日時（ISO 8601形式）
          example: 2021-06-22T14:24:02.071Z
    TaskSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: タスクの一意の識別子(UUID)
          example: f0f8f5a0-309d-11ec-8d3d-0242ac130003
        title:
          $ref: '#/components/schemas/TaskTitle'
        completed:
          type: boolean
          description: タスクが完了したかどうか
          example: false
        createdAt:
          type: string
          format: date-time
          description: タスクの作成日時（ISO 8601形式）
          example: 2021-06-22T14:24:02.071Z
        updatedAt:
          type: string
          format: date-time
          description: タスクの最終更新日時（ISO 8601形式）
          example: 2021-06-22T14:24:02.071Z
    CreateTaskRequest:
      type: object
      required:
        - title
      properties:
        title:
          $ref: '#/components/schemas/TaskTitle'
        description:
          $ref: '#/components/schemas/TaskDescription'
    UpdateTaskRequest:
      type: object
      # NOTE: どちらかが含まれていればいいので必須にはしない
      properties:
        title:
          $ref: '#/components/schemas/TaskTitle'
        description:
          $ref: '#/components/schemas/TaskDescription'
    CompleteTaskRequest:
      type: object
      required:
        - completed
      properties:
        completed:
          type: boolean
          description: タスクが完了したかどうか
    CreateUserRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          $ref: '#/components/schemas/Password'
    AccessTokenRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          type: string
          description: パスワード
          example: p@ssword123
    AccessTokenResponse:
      type: object
      properties:
        token:
          type: string
          description: JWTトークン
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ユーザーの一意の識別子(UUID)
          example: f0f8f5a0-309d-11ec-8d3d-0242ac130004
        email:
          $ref: '#/components/schemas/Email'
    Email:
      type: string
      format: email
      description: 有効なメールアドレス
      example: john_doe@example.com
    Password:
      type: string
      minLength: 8
      maxLength: 64
      pattern: '^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[^a-zA-Z0-9]).*$'
      description: 8文字以上64文字以下で英語、数字、記号の組み合わせ
      example: p@ssword123
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
  responses:
    400Path:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                enum: [INVALID_PATH_PARAMETER]
              message:
                type: string
          examples:
            INVALID_PATH_PARAMETER:
              $ref: '#/components/examples/INVALID_PATH_PARAMETER'
    400PathAndPayload:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                enum: [INVALID_PAYLOAD_FORMAT, INVALID_PATH_PARAMETER]
              message:
                type: string
          examples:
            INVALID_PAYLOAD_FORMAT:
              $ref: '#/components/examples/INVALID_PAYLOAD_FORMAT'
            INVALID_PATH_PARAMETER:
              $ref: '#/components/examples/INVALID_PATH_PARAMETER'
    404Common:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                enum: [TASK_NOT_FOUND]
              message:
                type: string
          examples:
            TASK_NOT_FOUND:
              $ref: '#/components/examples/TASK_NOT_FOUND'
    409EmailAlreadyInUse:
      description: Conflict
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                enum: [USER_EMAIL_EXISTS]
              message:
                type: string
          examples:
            USER_EMAIL_EXISTS:
              $ref: '#/components/examples/USER_EMAIL_EXISTS'
    422Common:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                enum: [INVALID_PAYLOAD_VALUE]
              message:
                type: string
          examples:
            INVALID_PAYLOAD_VALUE:
              $ref: '#/components/examples/INVALID_PAYLOAD_VALUE'
    422PaylodAndUpdateRule:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                enum: [INVALID_PAYLOAD_VALUE, TASK_UPDATE_RULE_ERROR]
              message:
                type: string
          examples:
            INVALID_PAYLOAD_VALUE:
              $ref: '#/components/examples/INVALID_PAYLOAD_VALUE'
            TASK_UPDATE_RULE_ERROR:
              $ref: '#/components/examples/TASK_UPDATE_RULE_ERROR'
    500Common:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                enum: [DATABASE_CONNECTION_ERROR, TIMEOUT, UNKNOWN_ERROR]
              message:
                type: string
          examples:
            DATABASE_CONNECTION_ERROR:
              $ref: '#/components/examples/DATABASE_CONNECTION_ERROR'
            TIMEOUT:
              $ref: '#/components/examples/TIMEOUT'
            UNKNOWN_ERROR:
              $ref: '#/components/examples/UNKNOWN_ERROR'
    503Common:
      description: 'Service Unavailable'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              code:
                type: 'string'
                enum: [SERVICE_DOWNTIME, EXTERNAL_SERVICE_FAILURE]
              message:
                type: 'string'
          examples:
            SERVICE_DOWNTIME:
              $ref: '#/components/examples/SERVICE_DOWNTIME'
            EXTERNAL_SERVICE_FAILURE:
              $ref: '#/components/examples/EXTERNAL_SERVICE_FAILURE'

  examples:
    INVALID_PAYLOAD_FORMAT:
      value:
        code: REQ001
        message: 'Payload format is incorrect. Details: ${errorDetails}'
    INVALID_PAYLOAD_VALUE:
      value:
        code: REQ002
        message: 'Invalid value in the request payload. Details: ${errorDetails}'
    INVALID_QUERY_PARAMETER:
      value:
        code: REQ003
        message: 'Insufficient or invalid query parameter.'
    INVALID_PATH_PARAMETER:
      value:
        code: REQ004
        message: 'Invalid or missing parameters. Details: ${errorDetails}'
    INVALID_CREDENTIALS:
      value:
        code: USER001
        message: 'Invalid email or password.'
    USER_NOT_FOUND:
      value:
        code: USER002
        message: 'User not found.'
    INVALID_PASSWORD_FORMAT:
      value:
        code: USER003
        message: 'The password format is invalid. Please ensure it meets the required criteria.'
    INVALID_EMAIL_FORMAT:
      value:
        code: USER004
        message: 'The provided email format is invalid. Please enter a valid email address.'
    USER_EMAIL_EXISTS:
      value:
        code: USER101
        message: 'This email address is already in use.'
    TASK_NOT_FOUND:
      value:
        code: APP001
        message: 'Task not found. TaskID: ${taskId}'
    TASK_UPDATE_RULE_ERROR:
      value:
        code: APP002
        message: 'Provided data does not follow update rules.'
    DATABASE_CONNECTION_ERROR:
      value:
        code: SYS001
        message: 'Database connection error.'
    SERVICE_DOWNTIME:
      value:
        code: SYS002
        message: 'Service is currently unavailable.'
    EXTERNAL_SERVICE_FAILURE:
      value:
        code: SYS003
        message: 'External service error.'
    TIMEOUT:
      value:
        code: SYS004
        message: 'Processing timeout.'
    UNKNOWN_ERROR:
      value:
        code: SYS999
        message: 'Unexpected error.'
